---
import { Image } from "astro:assets"
import { getCollection } from "astro:content"

import SITE from "@/data/site.json"
import Layout from "@/components/Layout.astro"

// export async function getStaticPaths({ paginate }) {
export async function getStaticPaths() {
	const posts = await getCollection("posts")

	return posts.map((post) => ({
		params: { slug: post.slug },
		props: { post },
	}))
	// return paginate(allPokemon, { pageSize: 10 });
}
// type Props = CollectionEntry<'posts'>
// const post = Astro.props

// const post: CollectionEntry<'blog'> = Astro.props.post

const { post } = Astro.props

const { Content } = await post.render()
---

<Layout
	seo={{
		title: post.data.title,
		description: post.data.description ?? SITE.description,
		openGraph: {
			basic: {
				title: post.data.title,
				type: "article",
				image: post.data.image.src,
			},
		},
	}}
>
	<article
		class="article-grid text-md grid gap-y-4 font-sans leading-relaxed md:gap-y-4 md:text-xl"
	>
		<!-- <div class="full-bleed h-[500px]">
			<Image
				alt={post.data.title}
				src={post.data.image}
				class="h-full w-full object-cover"
			/>
		</div> -->

		<h1 class="wide-bleed my-8 text-2xl md:text-5xl">
			{post.data.title}
		</h1>

		<div class="prose-lg prose-gray">
			<Content />
		</div>
	</article>
</Layout>
<!--
	<PostLayout {...post.data}>
  	<Content />
	</PostLayout>
-->

<!-- <style>
	.article-grid {
		grid-template-columns: [full-start] 1fr [wide-start] 140px [content-start] 720px [content-end] 140px [wide-end] 1fr [full-end];
	}

	.article-grid > * {
		grid-column: content;
	}

	.article-grid > .full-bleed {
		grid-column: full;
	}

	.article-grid > .wide-bleed {
		grid-column: wide;
	}

	@media screen and (max-width: 1000px) {
		.article-grid {
			grid-template-columns: 18px 1fr 18px;
			grid-template-areas:
				". content ."
				"full full full"
				". wide .";
		}
	}
</style> -->

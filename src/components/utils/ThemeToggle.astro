<button
	id="theme-btn"
	class="focus-outline"
	title="Toggles light & dark"
	aria-label="auto"
	aria-live="polite"
>
	<svg
		xmlns="http://www.w3.org/2000/svg"
		id="moon-svg"
		fill="#0f172a"
		class="inline-block h-6 w-6"
	>
		<path
			d="M20.742 13.045a8.088 8.088 0 0 1-2.077.271c-2.135 0-4.14-.83-5.646-2.336a8.025 8.025 0 0 1-2.064-7.723A1 1 0 0 0 9.73 2.034a10.014 10.014 0 0 0-4.489 2.582c-3.898 3.898-3.898 10.243 0 14.143a9.937 9.937 0 0 0 7.072 2.93 9.93 9.93 0 0 0 7.07-2.929 10.007 10.007 0 0 0 2.583-4.491 1.001 1.001 0 0 0-1.224-1.224zm-2.772 4.301a7.947 7.947 0 0 1-5.656 2.343 7.953 7.953 0 0 1-5.658-2.344c-3.118-3.119-3.118-8.195 0-11.314a7.923 7.923 0 0 1 2.06-1.483 10.027 10.027 0 0 0 2.89 7.848 9.972 9.972 0 0 0 7.848 2.891 8.036 8.036 0 0 1-1.484 2.059z"
		></path>
	</svg>
	<svg
		xmlns="http://www.w3.org/2000/svg"
		id="sun-svg"
		fill="#f99cbd"
		class="inline-block h-6 w-6"
	>
		<path
			d="M6.993 12c0 2.761 2.246 5.007 5.007 5.007s5.007-2.246 5.007-5.007S14.761 6.993 12 6.993 6.993 9.239 6.993 12zM12 8.993c1.658 0 3.007 1.349 3.007 3.007S13.658 15.007 12 15.007 8.993 13.658 8.993 12 10.342 8.993 12 8.993zM10.998 19h2v3h-2zm0-17h2v3h-2zm-9 9h3v2h-3zm17 0h3v2h-3zM4.219 18.363l2.12-2.122 1.415 1.414-2.12 2.122zM16.24 6.344l2.122-2.122 1.414 1.414-2.122 2.122zM6.342 7.759 4.22 5.637l1.415-1.414 2.12 2.122zm13.434 10.605-1.414 1.414-2.122-2.122 1.414-1.414z"
		></path>
	</svg>
</button>

<script is:inline>
	const primaryColorScheme = '' // "light" | "dark"

	// Get theme data from local storage
	const currentTheme = localStorage.getItem('theme')

	function getPreferTheme() {
		// return theme value in local storage if it is set
		if (currentTheme) return currentTheme

		// return primary color scheme if it is set
		if (primaryColorScheme) return primaryColorScheme

		// return user device's prefer color scheme
		return window.matchMedia('(prefers-color-scheme: dark)').matches
			? 'dark'
			: 'light'
	}

	let themeValue = getPreferTheme()

	function setPreference() {
		const doc = document.documentElement
		const onTransitionDone = () => {
			doc.classList.remove('nightwind')
			doc.removeEventListener('transitionend', onTransitionDone)
		}
		doc.addEventListener('transitionend', onTransitionDone)
		if (!doc.classList.contains('nightwind')) {
			doc.classList.add('nightwind')
		}

		localStorage.setItem('theme', themeValue)
		localStorage.setItem('nightwind-mode', themeValue)
		reflectPreference()
	}

	function reflectPreference() {
		document.firstElementChild.setAttribute('data-theme', themeValue)
		document.documentElement.classList.remove('light')
		document.documentElement.classList.remove('dark')
		document.documentElement.classList.add(themeValue)

		document.querySelector('#theme-btn')?.setAttribute('aria-label', themeValue)

		// Get a reference to the body element
		const body = document.body

		// Check if the body element exists before using getComputedStyle
		if (body) {
			// Get the computed styles for the body element
			const computedStyles = window.getComputedStyle(body)

			// Get the background color property
			const bgColor = computedStyles.backgroundColor

			// Set the background color in <meta theme-color ... />
			document
				.querySelector("meta[name='theme-color']")
				?.setAttribute('content', bgColor)
		}
	}

	// set early so no page flashes / CSS is made aware
	reflectPreference()

	window.onload = () => {
		function setThemeFeature() {
			// set on load so screen readers can get the latest value on the button
			reflectPreference()

			// now this script can find and listen for clicks on the control
			document.querySelector('#theme-btn')?.addEventListener('click', () => {
				themeValue = themeValue === 'light' ? 'dark' : 'light'
				setPreference()
			})
		}

		setThemeFeature()

		// Runs on view transitions navigation
		document.addEventListener('astro:after-swap', setThemeFeature)
	}

	// sync with system changes
	window
		.matchMedia('(prefers-color-scheme: dark)')
		.addEventListener('change', ({ matches: isDark }) => {
			themeValue = isDark ? 'dark' : 'light'
			setPreference()
		})
</script>

<style>
	#sun-svg,
	html[data-theme='dark'] #moon-svg {
		display: block;
	}
	#moon-svg,
	html[data-theme='dark'] #sun-svg {
		display: none;
	}

	/* #theme-btn {
    @apply p-3 sm:p-1;
  } */
	#theme-btn svg {
		@apply scale-125 transition-all hover:rotate-12 sm:scale-100;
	}
</style>
